
&НаКлиенте
Перем Операции;
&НаКлиенте
Перем ТекстовыйДокумент;

#Область ОбработчикиСобытий

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПутьКПлатформе = ПолучитьПутьКПлатформе();
	СтрокаПодключенияКБазе = СтрокаСоединенияИнформационнойБазы();
	Логин = ИмяПользователяНаСервере();

	ЗаполнитьСписокВыбораТипаОперации();
	ПрочитатьПутьКРепозитарию();
	
	Если ПустаяСтрока(ТипОперации) Тогда
		ТипОперации = Операции.ПолнаяВыгрузкаCF;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Сделать(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ВыполнитьОперациюСВопросомЗавершение", ЭтотОбъект);
	
	Если ТипОперации = Операции.СоздатьEPF Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("РезультатВопросаПередОперациейСозданияEpf", ЭтотОбъект, Оповещение),
		               "Будут заново созданы файлы. Продолжить?",
		               РежимДиалогаВопрос.ДаНет,
		               60,
		               КодВозвратаДиалога.Нет,
		               "Внимание",
		               КодВозвратаДиалога.Нет);
	Иначе
		ВыполнитьОбработкуОповещения(Оповещение, Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПутьКПлатформеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	НачалоВыбораФайла(Элемент, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПапкаВыгрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	НачалоВыбораФайла(Элемент, СтандартнаяОбработка);
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

&НаКлиенте
Функция ПолучитьПутьКПлатформе()
	Возврат СтрЗаменить(КаталогПрограммы(), "\bin", "");
КонецФункции

&НаКлиенте
Процедура УстановитьПапкуВыгрузкиПоПутиВФайле(Знач Существует, Знач ДополнительныеПараметры) Экспорт
	
	Если Не Существует Тогда
		Возврат;
	КонецЕсли;
	
	ЧтениеТекста = Новый ЧтениеТекста(ДополнительныеПараметры.ИмяФайла);
	ПутьКРепозитарию = ЧтениеТекста.ПрочитатьСтроку();
	ЧтениеТекста.Закрыть();
	
	ПапкаВыгрузки = ПутьКРепозитарию + "\";
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВыбранныйПуть(Знач ВыбранныеФайлы, Знач ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭтотОбъект[ДополнительныеПараметры.ИмяЭлемента] = ВыбранныеФайлы[0] + "\";
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатВопросаПередОперациейСозданияEpf(Знач РезультатВопроса, Знач ДополнительныеПараметры) Экспорт
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры, РезультатВопроса = КодВозвратаДиалога.Да);
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОперациюСВопросомЗавершение(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	
	Если Не Результат Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьОперацию(ТипОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура ЧтениеЛогаЗавершение(Знач ДополнительныеПараметры) Экспорт
	ТекстовыйДокумент.Показать("Ошибка при выполнении операции");
	НачатьУдалениеФайлов(Неопределено, ДополнительныеПараметры.Лог);
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьКомандуЗавершение(Знач КодВозврата, Знач ДополнительныеПараметры) Экспорт
	
	Если КодВозврата <> 0 Тогда
		
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.НачатьЧтение(Новый ОписаниеОповещения("ЧтениеЛогаЗавершение",
		                                                        ЭтотОбъект,
		                                                        Новый Структура("Лог", ДополнительныеПараметры.Лог)),
		                               ДополнительныеПараметры.Лог,
		                               КодировкаТекста.UTF8);
		
		Возврат;
		
	КонецЕсли;
	
	Если ДополнительныеПараметры.КопияИОригинал.Количество() > 0 Тогда
		ПеремещениеФайловСПроверкой(ДополнительныеПараметры.КопияИОригинал);
		УдалитьИспользованиеКонстантВФормах();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ВыполнитьОперацию(Знач ВыбраннаяОперация)
	
	КопияИОригинал = Новый Соответствие;
	
	Если Не Отладка Тогда
		
		Если КонфигурацияСОшибкамиВыгрузки() И (ВыбраннаяОперация = Операции.ПолнаяВыгрузкаCF Или ВыбраннаяОперация = Операции.ЧастичнаяВыгрузкаCF) Тогда
			ФайлыСОшибкамиВДиаграмах(КопияИОригинал);
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокаДляЗапуска = "";
	ПараметрыКоманднойСтроки = РеквизитыФормыВСтруктуру();
	
	Если ВыбраннаяОперация = Операции.ПолнаяВыгрузкаCF Тогда
		ПараметрыКоманднойСтроки.Вставить("Команда", "dump_config");
		СтрокаДляЗапуска = "--folder ""%ПапкаВыгрузкиКонфигурации%""";
	ИначеЕсли ВыбраннаяОперация = Операции.ЧастичнаяВыгрузкаCF Тогда
		ПараметрыКоманднойСтроки.Вставить("Команда", "dump_config");
		СтрокаДляЗапуска = "--folder ""%ПапкаВыгрузкиКонфигурации%"" --update";
	ИначеЕсли ВыбраннаяОперация = Операции.ВыгрузкаCFE Тогда
		ПараметрыКоманднойСтроки.Вставить("Команда", "dump_extensions");
		СтрокаДляЗапуска = "--folder ""%ПапкаВыгрузкиРасширений%""";
	ИначеЕсли ВыбраннаяОперация = Операции.ВыгрузкаEPF Тогда
		ПараметрыКоманднойСтроки.Вставить("Команда", "sync");
		СтрокаДляЗапуска = "--folder ""%ПапкаВыгрузки%""";
	ИначеЕсли ВыбраннаяОперация = Операции.СоздатьEPF Тогда
		ПараметрыКоманднойСтроки.Вставить("Команда", "sync");
		СтрокаДляЗапуска = "--folder ""%ПапкаВыгрузки%"" --create";
	КонецЕсли;
	
	ЗапуститьКоманду(СтрокаДляЗапуска, ПараметрыКоманднойСтроки, КопияИОригинал);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьКоманду(Знач СтрокаДляЗапуска, Знач ПараметрыКоманднойСтроки, Знач КопияИОригинал)
	
	Команда = ПодставитьПараметрыВСтроку(СтрокаЗапускаСкрипта(Истина, Отладка) + " " + СтрокаДляЗапуска, ПараметрыКоманднойСтроки);
	
	Если Отладка Тогда
		Сообщить(Команда);
	Иначе
		НачатьЗапускПриложения(Новый ОписаниеОповещения("ЗапуститьКомандуЗавершение",
		                                                ЭтотОбъект,
		                                                Новый Структура("Лог, КопияИОригинал", ПараметрыКоманднойСтроки.Лог, КопияИОригинал)),
		                       Команда,
		                       ,
		                       Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция РеквизитыФормыВСтруктуру()
	
	Структура = Новый Структура;
	Структура.Вставить("КодРазблокировки",          ?(ПустаяСтрока(КодРазблокировки), "None", КодРазблокировки));
	Структура.Вставить("Логин",                     Логин);
	Структура.Вставить("ПапкаВыгрузки",             Лев(ПапкаВыгрузки, СтрДлина(ПапкаВыгрузки)-1));
	Структура.Вставить("ПапкаВыгрузкиКонфигурации", Структура.ПапкаВыгрузки + "\cf");
	Структура.Вставить("ПапкаВыгрузкиРасширений",   Структура.ПапкаВыгрузки + "\lib\ext");
	Структура.Вставить("Пароль",                    Пароль);
	Структура.Вставить("ПутьКПлатформе",            Лев(ПутьКПлатформе, СтрДлина(ПутьКПлатформе)-1));
	Структура.Вставить("СтрокаПодключенияКБазе",    СтрокаПодключенияКБазе);
	Структура.Вставить("Лог",                       ПолучитьИмяВременногоФайла("txt"));
	
	Возврат Структура;
	
КонецФункции

&НаСервереБезКонтекста
Функция ИмяПользователяНаСервере()
	Возврат ИмяПользователя();
КонецФункции

&НаКлиенте
Процедура ЗаполнитьСписокВыбораТипаОперации()
	
	Для Каждого ТипОперции Из Операции Цикл
		Элементы.ТипОперации.СписокВыбора.Добавить(ТипОперции.Значение);
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьПутьКРепозитарию()
	
	Если Не ИнформационнаяБазаФайловая(СтрокаПодключенияКБазе) Тогда
		Возврат;
	КонецЕсли;
	
	Структура = ПолучитьПараметрыИзСтроки(СтрокаПодключенияКБазе);
	
	ПутьКФайлуРепозитария = Структура.File + "\GitPath.txt";
	
	Файл = Новый Файл(ПутьКФайлуРепозитария);
	Файл.НачатьПроверкуСуществования(Новый ОписаниеОповещения("УстановитьПапкуВыгрузкиПоПутиВФайле",
	                                                          ЭтотОбъект,
	                                                          Новый Структура("ИмяФайла", ПутьКФайлуРепозитария)));
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоВыбораФайла(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
		
	Если ЗначениеЗаполнено(Элемент.ТекстРедактирования) Тогда
		
		Файл = Новый Файл(Элемент.ТекстРедактирования);
		ДиалогВыбораФайла.Каталог = Файл.Путь;
		
	КонецЕсли;
	
	ДиалогВыбораФайла.Показать(Новый ОписаниеОповещения("УстановитьВыбранныйПуть",
	                                                    ЭтотОбъект,
	                                                    Новый Структура("ИмяЭлемента", Элемент.Имя)));
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция КонфигурацияСОшибкамиВыгрузки()
	
	Если Метаданные.РегистрыСведений.Найти("ВерсииПодсистем")<>Неопределено Тогда
		Возврат Истина;
	ИначеЕсли Метаданные.Имя = "УправлениеТорговлей" И Лев(Метаданные.Версия, 4) = "10.3" Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура ФайлыСОшибкамиВДиаграмах(КопияИОригинал)
	
	Файлы = Новый Массив;
	Файлы.Добавить("Documents\АктСверкиВзаиморасчетов\Templates\АктСверки\Ext\Template.xml");
	Файлы.Добавить("Reports\АнализЖурналаРегистрации\Templates\ПродолжительностьРаботыРегламентныхЗаданий\Ext\Template.xml");
	Файлы.Добавить("Reports\Диаграмма\Templates\Макет\Ext\Template.xml");
	Файлы.Добавить("Reports\ОтчетДиаграмма\Templates\Макет\Ext\Template.xml");
	Файлы.Добавить("Reports\РапортРуководителю\Templates\МакетРапорта\Ext\Template.xml");
	
	ПолныеПутиКФайлам = ПолучитьПутиДоФайловИсключений(ПапкаВыгрузки, Файлы);
	
	Для Каждого ИмяФайла Из ПолныеПутиКФайлам Цикл
		
		ИмяКопии = ПолучитьИмяВременногоФайла("xml");
		ПереместитьФайл(ИмяФайла, ИмяКопии);
		
		КопияИОригинал.Вставить(ИмяКопии, ИмяФайла);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПутиДоФайловИсключений(Знач ПапкаВыгрузки, Знач МассивФайлов)
	
	МассивФайловИсключений = Новый Массив;
	ПапкаВыгрузкиКонфигурации = РеквизитыФормыВСтруктуру().ПапкаВыгрузкиКонфигурации + "\";
	
	Для Каждого Элемент Из МассивФайлов Цикл
		ПутьКФайлу = ПапкаВыгрузкиКонфигурации + Элемент; 
		Файл = Новый Файл(ПутьКФайлу);
		Если Файл.Существует() Тогда
			МассивФайловИсключений.Добавить(ПутьКФайлу)
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивФайловИсключений;

КонецФункции

&НаКлиенте
Функция СтрокаЗапускаСкрипта(ТекущаяБаза = Истина, Отладка = Ложь)
	
	Шаблон = "runner1c";
	Если Отладка Тогда
		Шаблон = Шаблон + " --debug";
	КонецЕсли;
	Шаблон = Шаблон + " %Команда%";
	
	ПараметрыДляДобавления = Новый Массив;
	ПараметрыДляДобавления.Добавить(" --log ""%Лог%""");
	ПараметрыДляДобавления.Добавить("silent");
	ПараметрыДляДобавления.Добавить("path ""%ПутьКПлатформе%""");
	
	Если ТекущаяБаза Тогда
		
		Если Не ПустаяСтрока(КодРазблокировки) Тогда
			ПараметрыДляДобавления.Добавить("access %КодРазблокировки%");
		КонецЕсли;
		
		Если Не ПустаяСтрока(Логин) Тогда
			ПараметрыДляДобавления.Добавить("login ""%Логин%""");
			ПараметрыДляДобавления.Добавить("password %Пароль%");
		КонецЕсли;
		
		ПараметрыДляДобавления.Добавить("connection ""%СтрокаПодключенияКБазе%""");
		
	КонецЕсли;
	
	Возврат Шаблон + СтрСоединить(ПараметрыДляДобавления, " --");
	
КонецФункции

&НаКлиенте
Процедура ПеремещениеФайловСПроверкой(КопияИОригинал)
	
	Копии = ПолучитьИмяВременногоФайла("txt");
	ЗаписьКопии = Новый ЗаписьТекста(Копии);
	Оригиналы = ПолучитьИмяВременногоФайла("txt");
	ЗаписьОригиналы = Новый ЗаписьТекста(Оригиналы);
	
	Для Каждого Элемент Из КопияИОригинал Цикл 
		
		ИмяКопии = Элемент.Ключ;
		Оригинал = Элемент.Значение;
		
		Файл = Новый Файл(ИмяКопии);
	 	Если Не Файл.Существует() Тогда 
			Продолжить;
		КонецЕсли;
		
		ЗаписьКопии.ЗаписатьСтроку(ИмяКопии);
		ЗаписьОригиналы.ЗаписатьСтроку(Оригинал);
		
	КонецЦикла;
	
	ЗаписьКопии.Закрыть();
	ЗаписьОригиналы.Закрыть();
	
	Результат = ПолучитьИмяВременногоФайла("txt");
	
	ПараметрыКоманднойСтроки = РеквизитыФормыВСтруктуру();
	ПараметрыКоманднойСтроки.Вставить("Команда", "diff_mxl");
	СтрокаДляЗапуска = СтрокаЗапускаСкрипта(Ложь) + "--first %Копии% --second %Оригиналы% --result %Результат%";
	СтрокаДляЗапуска = ПодставитьПараметрыВСтроку(СтрокаДляЗапуска, ПараметрыКоманднойСтроки);
	
	НачатьЗапускПриложения(Неопределено, СтрокаДляЗапуска, , Истина);

	ФайлРезультат = Новый Файл(Результат);
	Если ФайлРезультат.Существует() Тогда
		ЧтениеТекста = Новый ЧтениеТекста(Результат);
		ИмяКопии = ЧтениеТекста.ПрочитатьСтроку();
		Пока ИмяКопии <> Неопределено Цикл
			ПереместитьФайл(ИмяКопии, КопияИОригинал[ИмяКопии]);
			ИмяКопии = ЧтениеТекста.ПрочитатьСтроку();
		КонецЦикла;
		ЧтениеТекста.Закрыть();
	КонецЕсли;
	
	Для Каждого Элемент Из КопияИОригинал Цикл 
		УдалитьФайлы(Элемент.Ключ);
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура УдалитьИспользованиеКонстантВФормах()
	
	ИменаФайлов = Новый Массив;
	ИменаФайлов.Добавить("DataProcessors\НастройкаРазрешенийНаИспользованиеВнешнихРесурсов\Forms\НастройкиИспользованияПрофилейБезопасности\Ext\Form.xml");
	ИменаФайлов.Добавить("DataProcessors\ПанельАдминистрированияБСП\Forms\НастройкиПользователейИПрав\Ext\Form.xml");
	ИменаФайлов.Добавить("DataProcessors\ПанельАдминистрированияБСП\Forms\НастройкиРаботыСФайлами\Ext\Form.xml");
	ИменаФайлов.Добавить("DataProcessors\ПанельАдминистрированияБСП\Forms\ОбщиеНастройки\Ext\Form.xml");
	ИменаФайлов.Добавить("DataProcessors\ПанельАдминистрированияБСП\Forms\Органайзер\Ext\Form.xml");
	ИменаФайлов.Добавить("DataProcessors\ПанельАдминистрированияБСП\Forms\ПечатныеФормыОтчетыИОбработки\Ext\Form.xml");
	ИменаФайлов.Добавить("DataProcessors\ПанельАдминистрированияБСП\Forms\ПоддержкаИОбслуживание\Ext\Form.xml");
	ИменаФайлов.Добавить("DataProcessors\ПанельАдминистрированияБСП\Forms\УправлениеПолнотекстовымПоискомИИзвлечениемТекстов\Ext\Form.xml");
	
	ИменаКонстант = Новый Массив;
	//УТ 10.3
	ИменаКонстант.Добавить("ЮрФизЛицо");
	ИменаКонстант.Добавить("УказаниеСкладовВТабличнойЧастиДокументов");
	ИменаКонстант.Добавить("УказаниеЗаказовВТабличнойЧастиДокументов");
	ИменаКонстант.Добавить("СтратегияАвторезервированияНоменклатурыПоЗаказам");
	ИменаКонстант.Добавить("СпособКонтроляДнейЗадолженности");
	ИменаКонстант.Добавить("ПорядокПрисвоенияPLU");
	ИменаКонстант.Добавить("ДополнительнаяКолонкаПечатныхФормДокументов");
	//БСП 2.3.3
	ИменаКонстант.Добавить("ПровайдерSMS");
	
	Для Каждого ИмяФайла Из ИменаФайлов Цикл
		
		ПутьКФайлу = РеквизитыФормыВСтруктуру().ПапкаВыгрузкиКонфигурации + "\" + ИмяФайла;
		
		Файл = Новый Файл(ПутьКФайлу);
		Если Не Файл.Существует() Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.Прочитать(ПутьКФайлу);
		
		ИндексСтрокДляУдаления = Новый Массив;
		
		Для Счетчик = 1 По ТекстовыйДокумент.КоличествоСтрок() Цикл
			
			СтрокаДокумента = ТекстовыйДокумент.ПолучитьСтроку(Счетчик);
			УдалитьСтроку = Ложь;
			
			Для Каждого ИмяКонстанты Из ИменаКонстант Цикл
				Если Найти(СтрокаДокумента, "<Field>НаборКонстант." + ИмяКонстанты + ".Ref</Field>")<>0 Тогда
					УдалитьСтроку = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если УдалитьСтроку Тогда
				ИндексСтрокДляУдаления.Добавить(Счетчик);
			КонецЕсли;
			
		КонецЦикла;
		
		СчетчикСмещения = 0;
		Для Каждого Элемент Из ИндексСтрокДляУдаления Цикл
			ТекстовыйДокумент.УдалитьСтроку(Элемент - СчетчикСмещения);
			СчетчикСмещения = СчетчикСмещения + 1;
		КонецЦикла;
		
		ТекстовыйДокумент.Записать(ПутьКФайлу);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ИнформационнаяБазаФайловая(Знач СтрокаСоединенияИнформационнойБазы = "")
			
	Если ПустаяСтрока(СтрокаСоединенияИнформационнойБазы) Тогда
		СтрокаСоединенияИнформационнойБазы =  СтрокаСоединенияИнформационнойБазы();
	КонецЕсли;
	Возврат Найти(Врег(СтрокаСоединенияИнформационнойБазы), "FILE=") = 1;
	
КонецФункции

&НаКлиенте
Функция ПолучитьПараметрыИзСтроки(Знач СтрокаПараметров)
	
	Результат = Новый Структура;
	
	СимволДвойныеКавычки = Символ(34); // (")
	
	МассивПодстрок = РазложитьСтрокуВМассивПодстрок(СтрокаПараметров, ";");
	
	Для Каждого СтрокаПараметра Из МассивПодстрок Цикл
		
		ПозицияПервогоЗнакаРавенства = Найти(СтрокаПараметра, "=");
		
		// Получаем имя параметра
		ИмяПараметра = СокрЛП(Лев(СтрокаПараметра, ПозицияПервогоЗнакаРавенства - 1));
		
		// Получаем значение параметра.
		ЗначениеПараметра = СокрЛП(Сред(СтрокаПараметра, ПозицияПервогоЗнакаРавенства + 1));
		
		Если  Лев(ЗначениеПараметра, 1) = СимволДвойныеКавычки
			И Прав(ЗначениеПараметра, 1) = СимволДвойныеКавычки Тогда
			
			ЗначениеПараметра = Сред(ЗначениеПараметра, 2, СтрДлина(ЗначениеПараметра) - 2);
			
		КонецЕсли;
		
		Если Не ПустаяСтрока(ИмяПараметра) Тогда
			
			Результат.Вставить(ИмяПараметра, ЗначениеПараметра);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция РазложитьСтрокуВМассивПодстрок(Знач Стр, Разделитель = ",")
	
	МассивСтрок = Новый Массив();
	Если Разделитель = " " Тогда
		Стр = СокрЛП(Стр);
		Пока Истина Цикл
			Поз = Найти(Стр,Разделитель);
			Если Поз=0 Тогда
				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр,Поз-1));
			Стр = СокрЛ(Сред(Стр,Поз));
		КонецЦикла;
	Иначе
		ДлинаРазделителя = СтрДлина(Разделитель);
		Пока Истина Цикл
			Поз = Найти(Стр,Разделитель);
			Если Поз=0 Тогда
				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр,Поз-1));
			Стр = Сред(Стр,Поз+ДлинаРазделителя);
		КонецЦикла;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ПодставитьПараметрыВСтроку(Шаблон, Знач ПарметрыСтроки)
	
	Строка = Шаблон;
	Для Каждого Элемент Из ПарметрыСтроки Цикл
		Строка = СтрЗаменить(Строка, "%" + Элемент.Ключ+ "%", Элемент.Значение);
	КонецЦикла;
		
	Возврат Строка;
	
КонецФункции

#КонецОбласти

#Область Инициализация

Операции = Новый Структура;
Операции.Вставить("ПолнаяВыгрузкаCF", "CF Полная Выгрузка");
Операции.Вставить("ЧастичнаяВыгрузкаCF", "CF Частичная Выгрузка");
Операции.Вставить("ВыгрузкаEPF", "EPF Выгрузка");
Операции.Вставить("СоздатьEPF", "EPF Создать");
Операции.Вставить("ВыгрузкаCFE", "CFE Выгрузка");

#КонецОбласти
